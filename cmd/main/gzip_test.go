package main

import (
	"bytes"
	"compress/gzip"
	"io"

	"github.com/tiga210/douyinLive"

	"testing"
)

var compressedData = []byte{31, 139, 8, 0, 0, 0, 0, 0, 0, 255, 236, 87, 93, 104, 28, 85, 27, 206, 217, 217, 166, 219, 73, 72, 150, 249, 62, 109, 136, 160, 75, 42, 94, 20, 38, 57, 103, 102, 118, 102, 118, 65, 236, 230, 103, 179, 249, 217, 26, 147, 110, 211, 68, 225, 48, 59, 123, 118, 118, 55, 59, 59, 219, 153, 217, 221, 108, 154, 22, 140, 218, 54, 214, 218, 88, 68, 180, 216, 42, 149, 182, 16, 41, 148, 250, 67, 77, 169, 241, 7, 84, 4, 169, 88, 47, 188, 16, 84, 76, 155, 104, 75, 47, 162, 8, 22, 44, 146, 38, 77, 170, 205, 69, 35, 90, 44, 238, 220, 205, 28, 206, 251, 190, 231, 57, 239, 251, 60, 243, 208, 207, 223, 71, 51, 189, 36, 170, 42, 150, 221, 153, 28, 32, 97, 98, 89, 138, 70, 152, 159, 238, 165, 127, 173, 94, 110, 197, 253, 198, 209, 119, 127, 217, 125, 110, 215, 217, 120, 205, 219, 47, 60, 243, 226, 87, 35, 79, 157, 141, 67, 208, 248, 97, 53, 125, 151, 105, 24, 58, 78, 39, 7, 8, 86, 13, 93, 55, 50, 216, 38, 131, 54, 243, 191, 109, 208, 159, 179, 136, 185, 221, 179, 13, 249, 45, 219, 76, 102, 180, 237, 181, 85, 244, 154, 117, 241, 133, 199, 51, 70, 213, 93, 170, 114, 85, 140, 131, 11, 85, 244, 247, 85, 174, 75, 251, 62, 63, 120, 229, 231, 103, 87, 185, 39, 175, 62, 125, 134, 174, 173, 60, 63, 249, 196, 15, 7, 95, 154, 217, 245, 230, 204, 228, 203, 237, 151, 29, 116, 60, 97, 219, 89, 203, 223, 208, 144, 229, 235, 99, 70, 174, 152, 204, 100, 147, 106, 189, 106, 232, 13, 74, 129, 232, 164, 1, 65, 56, 136, 32, 156, 127, 99, 149, 188, 98, 43, 102, 131, 110, 88, 74, 82, 101, 211, 68, 83, 212, 34, 230, 37, 31, 135, 189, 8, 113, 34, 47, 33, 78, 170, 79, 101, 137, 246, 80, 220, 52, 244, 7, 121, 40, 74, 162, 132, 120, 94, 160, 181, 197, 60, 8, 221, 166, 68, 156, 248, 79, 38, 98, 184, 149, 7, 26, 7, 79, 58, 232, 254, 37, 196, 217, 194, 124, 71, 252, 169, 206, 164, 174, 53, 44, 172, 52, 100, 72, 1, 207, 93, 56, 214, 76, 37, 70, 112, 154, 228, 73, 26, 231, 17, 70, 168, 62, 155, 209, 118, 216, 217, 116, 158, 53, 162, 169, 250, 164, 174, 104, 132, 126, 244, 6, 148, 255, 238, 224, 204, 3, 183, 182, 173, 198, 237, 241, 64, 208, 120, 79, 77, 69, 221, 218, 153, 189, 175, 205, 140, 143, 78, 31, 31, 157, 158, 56, 134, 208, 244, 196, 177, 243, 123, 246, 76, 191, 254, 234, 73, 80, 233, 178, 221, 78, 14, 8, 126, 10, 33, 113, 2, 124, 65, 193, 138, 3, 96, 26, 252, 71, 192, 57, 12, 190, 3, 116, 223, 202, 202, 185, 214, 101, 56, 171, 20, 23, 2, 115, 131, 24, 65, 140, 132, 229, 78, 186, 101, 69, 40, 174, 32, 50, 115, 255, 173, 108, 170, 169, 244, 84, 66, 240, 1, 160, 105, 87, 93, 57, 237, 116, 149, 49, 101, 35, 142, 178, 147, 142, 202, 88, 209, 138, 25, 36, 151, 226, 242, 90, 102, 214, 209, 25, 238, 17, 10, 157, 169, 64, 99, 32, 16, 8, 116, 231, 195, 82, 107, 175, 160, 235, 185, 190, 222, 194, 102, 187, 149, 237, 79, 244, 218, 108, 14, 22, 182, 134, 69, 214, 14, 53, 75, 164, 173, 57, 31, 25, 136, 90, 91, 242, 143, 24, 102, 177, 131, 221, 132, 189, 205, 125, 225, 64, 164, 217, 44, 54, 218, 209, 224, 9, 138, 250, 145, 42, 77, 215, 220, 116, 141, 57, 193, 97, 231, 31, 136, 254, 83, 103, 235, 60, 214, 225, 96, 70, 209, 34, 193, 174, 238, 192, 230, 205, 26, 105, 51, 219, 160, 215, 40, 196, 218, 115, 225, 64, 55, 151, 11, 115, 253, 131, 185, 96, 80, 9, 5, 115, 61, 225, 22, 57, 146, 55, 90, 3, 249, 116, 164, 89, 30, 234, 43, 246, 196, 55, 246, 88, 208, 87, 152, 117, 238, 115, 208, 163, 14, 87, 57, 83, 194, 122, 14, 107, 6, 148, 215, 221, 237, 2, 253, 204, 212, 169, 137, 169, 83, 167, 47, 236, 63, 62, 61, 242, 206, 204, 91, 135, 166, 38, 118, 118, 129, 221, 0, 188, 7, 102, 92, 110, 80, 115, 14, 174, 47, 105, 113, 73, 139, 255, 141, 29, 92, 210, 226, 146, 22, 151, 180, 184, 164, 197, 119, 62, 214, 12, 40, 111, 116, 186, 128, 27, 68, 157, 30, 110, 131, 163, 102, 209, 91, 211, 223, 210, 244, 255, 23, 204, 119, 152, 232, 81, 98, 94, 55, 230, 103, 104, 250, 55, 106, 249, 53, 247, 145, 175, 191, 57, 122, 179, 53, 159, 164, 232, 181, 201, 76, 94, 73, 39, 99, 120, 128, 20, 113, 54, 173, 168, 36, 97, 164, 99, 196, 100, 170, 23, 205, 249, 133, 131, 71, 166, 38, 118, 94, 51, 230, 81, 121, 201, 152, 143, 80, 174, 10, 166, 146, 94, 189, 78, 110, 106, 145, 130, 65, 207, 24, 53, 14, 46, 59, 232, 139, 14, 215, 233, 43, 239, 127, 57, 66, 185, 175, 94, 28, 125, 252, 24, 168, 93, 99, 37, 20, 115, 192, 19, 51, 140, 246, 29, 244, 240, 95, 82, 107, 219, 176, 88, 53, 195, 38, 89, 40, 35, 94, 133, 16, 225, 104, 84, 140, 33, 164, 114, 178, 207, 43, 8, 60, 66, 178, 226, 141, 199, 57, 81, 226, 36, 196, 113, 81, 168, 46, 171, 172, 39, 65, 149, 235, 21, 202, 205, 112, 14, 36, 251, 41, 1, 121, 39, 64, 217, 205, 100, 82, 33, 8, 50, 15, 125, 146, 207, 43, 115, 179, 14, 233, 70, 46, 137, 162, 76, 72, 232, 232, 239, 8, 179, 177, 62, 216, 22, 108, 236, 52, 228, 84, 91, 42, 34, 171, 233, 248, 166, 226, 16, 108, 142, 116, 20, 2, 82, 6, 162, 108, 111, 228, 4, 69, 93, 27, 151, 165, 211, 47, 205, 74, 39, 215, 214, 215, 162, 219, 193, 98, 111, 95, 91, 100, 83, 231, 64, 79, 58, 49, 228, 141, 13, 133, 154, 244, 118, 44, 182, 132, 155, 228, 98, 194, 39, 170, 92, 168, 171, 49, 213, 101, 230, 54, 242, 221, 209, 135, 67, 77, 193, 94, 53, 26, 40, 166, 186, 77, 94, 155, 117, 174, 174, 93, 197, 80, 52, 40, 11, 129, 46, 176, 101, 236, 19, 199, 110, 64, 205, 253, 156, 49, 37, 240, 111, 35, 248, 53, 31, 187, 186, 192, 126, 80, 26, 162, 59, 252, 30, 15, 128, 121, 138, 93, 228, 72, 166, 201, 102, 145, 196, 33, 145, 151, 189, 94, 94, 242, 201, 216, 100, 37, 222, 39, 240, 50, 226, 100, 40, 138, 146, 36, 249, 120, 217, 139, 99, 243, 95, 37, 65, 148, 188, 16, 202, 80, 68, 130, 0, 113, 142, 69, 56, 193, 34, 207, 71, 207, 29, 250, 108, 47, 183, 254, 177, 100, 198, 38, 102, 70, 73, 99, 203, 84, 253, 217, 156, 149, 176, 136, 153, 39, 230, 112, 60, 105, 90, 54, 54, 201, 86, 172, 91, 254, 249, 116, 146, 36, 114, 34, 39, 15, 23, 44, 11, 235, 150, 134, 237, 98, 150, 248, 205, 225, 130, 25, 179, 112, 222, 127, 189, 4, 145, 23, 100, 73, 246, 201, 72, 148, 55, 84, 135, 192, 239, 0, 0, 0, 255, 255, 1, 0, 0, 255, 255, 160, 225, 180, 16, 168, 21, 0, 0}

func BenchmarkGzipUnzipReset(b *testing.B) {
	//https://v.douyin.com/iMDdJd9s/
	d, _ := douyinLive.NewDouyinLive("23020419981")
	b.ResetTimer() // 如果有耗时的初始化，使用这个来重置计时器
	for i := 0; i < b.N; i++ {
		// 调用你的函数
		_, _ = d.GzipUnzipReset(compressedData)
	}
}
func BenchmarkGzip(b *testing.B) {

	b.ResetTimer() // 如果有耗时的初始化，使用这个来重置计时器
	for i := 0; i < b.N; i++ {
		gz, _ := gzip.NewReader(bytes.NewReader(compressedData))
		_, _ = io.ReadAll(gz)

	}
}
